{
  "Comment": "This StateMachine fetches information related to Lambda functions for the purpose of AWS provided Operational Review.",
  "StartAt": "GenerateFolder",
  "States": {
    "GenerateFolder": {
      "Type": "Pass",
      "Next": "ListFunctions",
      "Parameters": {
        "FolderKey.$": "States.Format('review-{}', $$.State.EnteredTime)"
      }
    },
    "ListFunctions": {
      "Next": "IsNextMarkerPresent",
      "Parameters": {
        "FunctionVersion": "ALL"
      },
      "Resource": "arn:aws:states:::aws-sdk:lambda:listFunctions",
      "Type": "Task",
      "ResultPath": "$.SetOfFunctions",
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "BackoffRate": 2,
          "IntervalSeconds": 1,
          "MaxAttempts": 3
        }
      ]
    },
    "IsNextMarkerPresent": {
      "Type": "Choice",
      "Choices": [
        {
          "Not": {
            "Variable": "$.SetOfFunctions.NextMarker",
            "IsPresent": true
          },
          "Next": "MarkerNotPresent"
        }
      ],
      "Default": "MarkerPresent"
    },
    "MarkerPresent": {
      "Type": "Pass",
      "Parameters": {
        "FolderKey.$": "$.FolderKey",
        "NextMarker.$": "$.SetOfFunctions.NextMarker",
        "Functions.$": "$.SetOfFunctions.Functions"
      },
      "Next": "MapAllFunctions"
    },
    "MarkerNotPresent": {
      "Type": "Pass",
      "Parameters": {
        "FolderKey.$": "$.FolderKey",
        "NextMarker": "None",
        "Functions.$": "$.SetOfFunctions.Functions"
      },
      "Next": "MapAllFunctions"
    },
    "MapAllFunctions": {
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "AllFunctionsListProvisionedConcurrency",
        "States": {
          "AllFunctionsGetFunctionConcurrency": {
            "Next": "IsVpcEnabledChoice",
            "Parameters": {
              "FunctionName.$": "$.FunctionName"
            },
            "Resource": "arn:aws:states:::aws-sdk:lambda:getFunctionConcurrency",
            "ResultPath": "$.FunctionReservedConcurrency",
            "Type": "Task"
          },
          "AllFunctionsListProvisionedConcurrency": {
            "Next": "AllFunctionsGetFunctionConcurrency",
            "Parameters": {
              "FunctionName.$": "$.FunctionName"
            },
            "Resource": "arn:aws:states:::aws-sdk:lambda:listProvisionedConcurrencyConfigs",
            "ResultPath": "$.FunctionProvisionedConcurrency",
            "Type": "Task"
          },
          "IsVpcEnabled": {
            "End": true,
            "Parameters": {
              "Architectures.$": "States.ArrayGetItem($.Architectures, 0)",
              "CodeSize.$": "$.CodeSize",
              "EphemeralStorage.$": "$.EphemeralStorage.Size",
              "FunctionArn.$": "$.FunctionArn",
              "FunctionName.$": "$.FunctionName",
              "MemorySize.$": "$.MemorySize",
              "PackageType.$": "$.PackageType",
              "ProvisionedConcurrencyConfigs.$": "$.FunctionProvisionedConcurrency.ProvisionedConcurrencyConfigs",
              "ReservedConcurrency.$": "$.FunctionReservedConcurrency",
              "Role.$": "$.Role",
              "Runtime.$": "$.Runtime",
              "SecurityGroupIds.$": "$.VpcConfig.SecurityGroupIds",
              "SnapStartOn.$": "$.SnapStart.ApplyOn",
              "SnapStartOptimizationStatus.$": "$.SnapStart.OptimizationStatus",
              "SubnetIds.$": "$.VpcConfig.SubnetIds",
              "Timeout.$": "$.Timeout",
              "TracingConfig.$": "$.TracingConfig.Mode",
              "VpcId.$": "$.VpcConfig.VpcId"
            },
            "Type": "Pass"
          },
          "IsVpcEnabledChoice": {
            "Choices": [
              {
                "And": [
                  {
                    "Variable": "$.VpcConfig.VpcId",
                    "IsPresent": true
                  },
                  {
                    "Not": {
                      "Variable": "$.VpcConfig.VpcId",
                      "StringMatches": ""
                    }
                  }
                ],
                "Next": "IsRuntimePresentVpcEnabled"
              }
            ],
            "Default": "IsRuntimePresentNoVpcEnabled",
            "Type": "Choice"
          },
          "IsRuntimePresentNoVpcEnabled": {
            "Type": "Choice",
            "Choices": [
              {
                "Not": {
                  "Variable": "$.Runtime",
                  "IsPresent": true
                },
                "Next": "NoVpcEnaledAddRuntime"
              }
            ],
            "Default": "NoVpcEnabled"
          },
          "NoVpcEnaledAddRuntime": {
            "Type": "Pass",
            "End": true,
            "Parameters": {
              "Architectures.$": "States.ArrayGetItem($.Architectures, 0)",
              "CodeSize.$": "$.CodeSize",
              "EphemeralStorage.$": "$.EphemeralStorage.Size",
              "FunctionArn.$": "$.FunctionArn",
              "FunctionName.$": "$.FunctionName",
              "MemorySize.$": "$.MemorySize",
              "PackageType.$": "$.PackageType",
              "ProvisionedConcurrencyConfigs.$": "$.FunctionProvisionedConcurrency.ProvisionedConcurrencyConfigs",
              "ReservedConcurrency.$": "$.FunctionReservedConcurrency",
              "Role.$": "$.Role",
              "Runtime": "Container",
              "SnapStartOn.$": "$.SnapStart.ApplyOn",
              "SnapStartOptimizationStatus.$": "$.SnapStart.OptimizationStatus",
              "Timeout.$": "$.Timeout",
              "TracingConfig.$": "$.TracingConfig.Mode"
            }
          },
          "IsRuntimePresentVpcEnabled": {
            "Type": "Choice",
            "Choices": [
              {
                "Not": {
                  "Variable": "$.Runtime",
                  "IsPresent": true
                },
                "Next": "IsVpcEnaledAddRuntime"
              }
            ],
            "Default": "IsVpcEnabled"
          },
          "IsVpcEnaledAddRuntime": {
            "Type": "Pass",
            "End": true,
            "Parameters": {
              "Architectures.$": "States.ArrayGetItem($.Architectures, 0)",
              "CodeSize.$": "$.CodeSize",
              "EphemeralStorage.$": "$.EphemeralStorage.Size",
              "FunctionArn.$": "$.FunctionArn",
              "FunctionName.$": "$.FunctionName",
              "MemorySize.$": "$.MemorySize",
              "PackageType.$": "$.PackageType",
              "ProvisionedConcurrencyConfigs.$": "$.FunctionProvisionedConcurrency.ProvisionedConcurrencyConfigs",
              "ReservedConcurrency.$": "$.FunctionReservedConcurrency",
              "Role.$": "$.Role",
              "Runtime": "Container",
              "SecurityGroupIds.$": "$.VpcConfig.SecurityGroupIds",
              "SnapStartOn.$": "$.SnapStart.ApplyOn",
              "SnapStartOptimizationStatus.$": "$.SnapStart.OptimizationStatus",
              "SubnetIds.$": "$.VpcConfig.SubnetIds",
              "Timeout.$": "$.Timeout",
              "TracingConfig.$": "$.TracingConfig.Mode",
              "VpcId.$": "$.VpcConfig.VpcId"
            }
          },
          "NoVpcEnabled": {
            "End": true,
            "Parameters": {
              "Architectures.$": "States.ArrayGetItem($.Architectures, 0)",
              "CodeSize.$": "$.CodeSize",
              "EphemeralStorage.$": "$.EphemeralStorage.Size",
              "FunctionArn.$": "$.FunctionArn",
              "FunctionName.$": "$.FunctionName",
              "MemorySize.$": "$.MemorySize",
              "PackageType.$": "$.PackageType",
              "ProvisionedConcurrencyConfigs.$": "$.FunctionProvisionedConcurrency.ProvisionedConcurrencyConfigs",
              "ReservedConcurrency.$": "$.FunctionReservedConcurrency",
              "Role.$": "$.Role",
              "Runtime.$": "$.Runtime",
              "SnapStartOn.$": "$.SnapStart.ApplyOn",
              "SnapStartOptimizationStatus.$": "$.SnapStart.OptimizationStatus",
              "Timeout.$": "$.Timeout",
              "TracingConfig.$": "$.TracingConfig.Mode"
            },
            "Type": "Pass"
          }
        }
      },
      "ItemsPath": "$.Functions",
      "Type": "Map",
      "Next": "RemoveDuplicates",
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "BackoffRate": 2,
          "IntervalSeconds": 0,
          "MaxAttempts": 3
        }
      ],
      "ResultPath": "$.ProcessedFunctions"
    },
    "RemoveDuplicates": {
      "Type": "Pass",
      "Next": "S3PutAllFunctions",
      "Parameters": {
        "FolderKey.$": "$.FolderKey",
        "NextMarker.$": "$.NextMarker",
        "Functions.$": "$.ProcessedFunctions"
      }
    },
    "ListFunctionsCntd": {
      "Next": "IsNextMarkerPresent",
      "Parameters": {
        "FunctionVersion": "ALL",
        "Marker.$": "$.NextMarker"
      },
      "Resource": "arn:aws:states:::aws-sdk:lambda:listFunctions",
      "Type": "Task",
      "ResultPath": "$.SetOfFunctions",
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "BackoffRate": 2,
          "IntervalSeconds": 2,
          "MaxAttempts": 4
        }
      ]
    },
    "S3PutAllFunctions": {
      "Next": "FilterParams",
      "Parameters": {
        "Body.$": "$.Functions",
        "Bucket": "${ReportBucketName}",
        "Key.$": "States.Format('{}/functions/{}.json', $.FolderKey, States.UUID())"
      },
      "Resource": "arn:aws:states:::aws-sdk:s3:putObject",
      "Type": "Task",
      "ResultPath": "$.Output",
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "BackoffRate": 2,
          "IntervalSeconds": 1,
          "MaxAttempts": 2
        }
      ]
    },
    "FilterParams": {
      "Type": "Pass",
      "Next": "RerunCheck",
      "Parameters": {
        "Bucket": "${ReportBucketName}",
        "FolderKey.$": "$.FolderKey",
        "NextMarker.$": "$.NextMarker"
      }
    },
    "RerunCheck": {
      "Type": "Choice",
      "Choices": [
        {
          "Not": {
            "Variable": "$.NextMarker",
            "StringEquals": "None"
          },
          "Next": "Wait"
        }
      ],
      "Default": "GetRecommendations"
    },
    "Wait": {
      "Type": "Wait",
      "Seconds": 3,
      "Next": "ListFunctionsCntd"
    },
    "GetRecommendations": {
      "Type": "Task",
      "Parameters": {},
      "Resource": "arn:aws:states:::aws-sdk:computeoptimizer:getLambdaFunctionRecommendations",
      "ResultPath": "$.Recommendations",
      "Next": "RecommendationsToS3",
      "Retry": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "BackoffRate": 2,
          "IntervalSeconds": 1,
          "MaxAttempts": 2
        }
      ]
    },
    "RecommendationsToS3": {
      "Type": "Task",
      "Parameters": {
        "Body.$": "$.Recommendations.LambdaFunctionRecommendations",
        "Bucket": "${ReportBucketName}",
        "Key.$": "States.Format('{}/recommendations.json', $.FolderKey)"
      },
      "Resource": "arn:aws:states:::aws-sdk:s3:putObject",
      "Next": "FilterRecommendationsOutput",
      "ResultPath": null,
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "BackoffRate": 2,
          "IntervalSeconds": 1,
          "MaxAttempts": 2
        }
      ]
    },
    "FilterRecommendationsOutput": {
      "Type": "Pass",
      "Next": "ListESMsAndSaveToS3",
      "Parameters": {
        "FolderKey.$": "$.FolderKey"
      }
    },
    "ListESMsAndSaveToS3": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "${EsmLambda}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "GenerateReport"
    },
    "GenerateReport": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "${GenerateLambda}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "OutputPath": "$.Payload",
      "End": true
    }
  }
}